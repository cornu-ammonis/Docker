docker notes:
EXPOSE {port#} makes the specified portavailable to outside world

WORKDIR /app
ADD . /app
above two lines will define the working directory as "/app" and 
copy current directory contents into the /app container directory


CMD["python", "app.py"] would run python app.py when container launches


docker build -t friendlyhello . 
creates a docker image and tags it as friendly hello
-t tag 

docker images 
lists images in registry

docker run -p 4000:80 
runs the app and maps the machine port 4000 to the exposed port 80
-p 
map ports

-d 
run in background, in detached mode

docker ps 
lists containers and ids

docker stop {container ID}
stops specified process

docker login
login

The notation for associating a local image with a repository on a 
registry, is username/repository:tag

docker tag friendlyhello username/repository:tag
Upload your tagged image:

docker push username/repository:tag
Once complete, the results of this upload are publicly available. From now on, you can use docker run and run your app on any machine with this command:

docker run -p 4000:80 username/repository:tag
or
docker run -p 80:80 username/repo:tag
to map it to
http://localhost/


A service really just means, “containers in production.” A service only runs one image, but it codifies the way that image runs – what ports it should use, how many replicas of the container should run so the service has the capacity it needs, and so on. 


the following docker-compose specifies the following:
- use version 3 (the most recent version)
- create a service called web, using the image found at username/repository:tag (should be relaced with actual values)
- create 5 instances
- limit each instance to use at most 10% of cpu and 50mb of ram
- immediately restart containers if one fails
- map the machine port 80 to service's ("web") port 80
- web's containers share port 80 via load balanced network called webnet ** needs more research
- define webnet as default (a load balanced overlay network)

** load balancing  
-"with each request, one of the five replicas is chosen, in a round-robin fashion, to respond"
version: "3"
services:
  web:
    image: username/repository:tag
    deploy:
      replicas: 5
      resources:
        limits:
          cpus: "0.1"
          memory: 50M
      restart_policy:
        condition: on-failure
    ports:
      - "80:80"
    networks:
      - webnet
networks:
  webnet:


running the service:
first,
docker swarm init
required to make this node a swarm manager
then
docker stack deploy -c docker-compose.yml getstartedlab

docker stack ps getstartedlab
to see a list of the 5 containers

to scale the app, simply modify the .yml, and run
docker stack deploy -c docker-compose.yml getstartedlab
it will do an in-place update; doesnt have to tear down the stack

to take down the app:
docker stack rm getstartedlab

